#!/bin/bash
# SETUP {{{
# TOC {{{
workrc() {
  echo "
  WORKRC
  --------------
  .workrc .............. alias for $HOME/.workrc

  TESTIUM
  --------------

  NPM
  --------------
  shrink ............. Runs npm shrinkwrap

  NODE
  --------------
  startDebug ...........Starts node Debugger for itier app
  runDebug ........... Runs node debug
  killDebug .......... Kill hanging node process on port :5858

  UTILITIES
  --------------
  mov2Gif ........... converts .mov to gif takes two params (input, output)
  rebuild ........... rebuilds node module then restarts PULL. PULL must be to
                      the left of node module.

  ALISES
  --------------
  rebl ........... rebuild
  db ........... startDebug
  kd ........... killDebug
  clearTmux ........... clears tmux
  "
}
#}}}
#JAVA
export JAVA_HOME=$(/usr/libexec/java_home -v 1.8.0_77)

# Checks for bash dot files
if [ ! -L "$HOME/Repos/deal/.git/hooks/pre-commit" ]; then
  ln -s -i $HOME/scripts/pre-commit $HOME/Repos/deal/.git/hooks/pre-commit
fi

#Color Highlighting
COL_GREEN="$(tput setaf 2)"
COL_BLUE="$(tput setaf 6)"
COL_RED="$(tput setaf 1)"
NORMAL=$(tput sgr0)

# Memcached
ulimit -n 4096
#}}}
# ALIASES {{{
alias .workrc='vim $HOME/.workrc'
alias db="startDebug"
alias kd="killDebug"
alias killport="killPort"
alias forget="flushMemcached"
# Git
alias clearTmux=" clear && tmux clear-history"
alias rb="rebuild"

# FUNCTIONS {{{
  # HELPER {{{

    reviewPullRequest() {
      if (( $# == 1)); then
        PR_NUM=$1
        checkUntracked="$(git ls-files --others --exclude-standard)"
        checkBranchState="$(git diff-index HEAD && git diff-index --cached HEAD)"
        $(test -z "$checkBranchState" && test -z "$checkUntracked")

        if (($? > 0)); then
          echo 'stashing changes'
          $(git stash save --no-keep-index --include-untracked "Saving To Check PR #${PR_NUM}")
          if (($? > 0)); then
            echo 'failed to stash changes, stopping process'
          else
            git co -b "PR-${PR_NUM}"
            git fetch upstream refs/pull/${PR_NUM}/merge
            git reset --hard FETCH_HEAD
          fi
        fi
      else
        echo "${COL_BLUE}Usage: reviewPullRequest <Pull Request Number>${NORMAL}"
      fi

   }

  flushMemcached() {
    echo 'flush_all' | nc localhost 11211
  }

  killPort() {
    if (( $# == 1 )); then
      local PORT=$1
      local readonly USEDPORT=$(lsof -i :$PORT);

        if [[ -n $USEDPORT ]];
        then
          $(ps -eo pid,command | ag [n]ode | awk "{print $2}" | xargs kill -9 > /dev/null 2>&1 &)
          echo -e "${COL_GREEN} Done!";
        else
          echo -e "${COL_BLUE} Port ${PORT} not in use";
        fi
    else
      echo "${COL_BLUE}Usage: killPort <pid>${NORMAL}"
    fi
  }

  cleanStart() {
    if (( $# == 1 )); then
      if [ $1 = "-d" ]; then
        echo -e "${COL_BLUE}running cleanStart {start server}...${NORMAL}";
        npm cache clean && make clean setup assets dev
      fi



    else

      if command -v npm && ! command -v make > /dev/null; then
        echo -e "${COL_BLUE}running cleanStart...${NORMAL}";
        rm -rf node_modules && npm install && gulp build server
      elif command -v yarn > /dev/null; then
        echo -e "${COL_BLUE}running cleanStart {yarn}...${NORMAL}";
        yarn cache clean;
        rm -rf node_modules
        make clean setup assets;
      elif command -v make > /dev/null; then
        echo -e "${COL_BLUE}running cleanStart {npm}...${NORMAL}";
        $(npm cache clean && make clean setup assets)
      else
        echo -e "${COL_RED}[ERR] ${COL_BLUE}Cannot determine strategy to clean project${NORMAL}";
      fi
    fi

  }


  function rebuild () {
    gulp build
    killPort 3070
    tmux send-keys -t left "make dev" C-m
  }
  #}}}
# DEBUG {{{
runDebug() {
  if type "tmux" > /dev/null; then
    clearTmux
  fi;
  echo "[DEBUG] ${NODE_ENV}"

  if [ -a core/worker-shim.js ]; then
    NODE_ENV=test
    node debug core/worker-shim.js;
  else
    echo "missing core/worker-shim";
    node debug
  fi
}

killDebug() {

if [[ $(lsof -i :5858) ]]; then
    killPort 5858
    echo -e "${COL_BLUE}killed node debug${NORMAL}";
  else
    echo -e "${COL_BLUE}node debug is not running${NORMAL}";
fi
}

startDebug() {
  if (( $# == 1)); then
    NODE_ENV=test
  else
    unset NODE_ENV
  fi
   killDebug
   runDebug
}
#}}}
#{{{ RELEASE
prepRelease() {
  DATE=$(date +'%Y%m%d')
  echo -e "${COL_BLUE}running cleanRelease...${NORMAL}";
  git checkout master;
  git fetch --all;
  git reset --hard upstream/master;
  git push origin master;
  npm cache clean && make clean setup assets;
  git checkout -b "shrinkwrap-${DATE}";
  make shrinkwrap;
  git commit -am "new shrinkwrap for release ${DATE}";
  git push origin "shrinkwrap-${DATE}";
  echo -e "${COL_BLUE}Open a PR https://github.groupondev.com/funnel/deal/pulls${NORMAL}";
  echo -e "${COL_BLUE}Once PR is merged run command:${NORMAL} buildRelease";
}

buildRelease() {
  read -p "Create Release Candidate? [y/n] " response
  if [[ $response =~ ([yY]) ]]; then
    echo -e "${COL_BLUE}CREATING RELEASE BRANCH ${NORMAL}";
    _buildReleaseCandidate
  else
    echo 'nevermind then'
  fi
}

tagRelease() {
  DATE=$(date +'%Y.%m.%d_%H%M')
  git tag "deal-${DATE}"
}

_buildReleaseCandidate() {
  git fetch --all
  DATE=$(date +'%Y.%m.%d_%H%M')
  git co master
  git reset --hard FETCH_HEAD
  git branch -D release
  git checkout -b release
  tagRelease
  prompt -p "shall I deploy the release branch? [y/n]" response
  if [[ $response =~ ([yY]) ]]; then
    _deployRelease
  else
    echo -e "${COL_BLUE}DID NOT DEPLOY${NORMAL}";
  fi
}

_deployRelease() {
  echo -e "${COL_BLUE}DEPLOYING RELEASE${NORMAL}";
  git push -uf upstream release
  git push origin --tags
  git push upstream --tags
}
#}}}
#}}}
# vim: fdm=marker foldlevelstart=1 foldlevel=0

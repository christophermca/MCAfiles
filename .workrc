#!/bin/bash

#JAVA
export JAVA_HOME=$(/usr/libexec/java_home -v 1.8.0_77)
workrc() {
  echo "
  WORKRC
  --------------
  .workrc .............. alias for $HOME/.workrc

  MAKE
  --------------
  mI ................ Make Inspector
  mTD ................ Make Test-Dev
  mS ................ Make Setup
  cleanBreak ......... DEPRICATED USE CLEANSTART: Runs make shrinkwrap setup test-unit

  TESTIUM
  --------------
  itg ................ Runs testium for one file

  NPM
  --------------
  shrink ............. Runs npm shrinkwrap

  NODE
  --------------
  startDebug ...........Starts node Debugger for itier app
  runDebug ........... Runs node debug
  killDebug .......... Kill hanging node process on port :5858

  UTILITIES
  --------------
  mov2Gif ........... converts .mov to gif takes two params (input, output)
  rebuild ........... rebuilds node module then restarts PULL. PULL must be to
                      the left of node module.

  ALISES
  --------------
  rb ........... rebuild
  db ........... startDebug
  kd ........... killDebug
  clearTmux ........... clears tmux
  mochalocal ........... runs itg
  "
}

# Checks for bash dot files
if [ ! -L "$HOME/Repos/deal/.git/hooks/pre-commit" ]; then
  ln -s -i $HOME/scripts/pre-commit $HOME/Repos/deal/.git/hooks/pre-commit
fi

#Color Highlighting
COL_BLUE="$(tput setaf 6)"
NORMAL=$(tput sgr0)

# NVM install
export NVM_DIR="/users/cmcadams/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # this loads nvm

# Memcached
ulimit -n 4096

#### ALIAS
alias .workrc='vim $HOME/.workrc'
alias mochalocal="itg"
alias db="startDebug"
alias kd="killDebug"

# Git
alias clearTmux=" clear && tmux clear-history"
alias cleanBreak="echo DEPRICATED: please use cleanStart instead"
alias rb="rebuild"
alias server="make reloader"

  # Make
  alias mI="make inspector"
  alias mTD="make test-dev"
  alias mD="make dev"
  alias mS="make setup"
  alias shrink="npm run test-shrinkwrap || make shrinkwrap"

#### FUNCTIONS

killPort() {
  if (( $# == 1  )); then
    local PORT=$1
    local readonly USEDPORT=$(lsof -i :$PORT);

      if [[ -n $USEDPORT ]];
      then
        $(ps -eo pid,command | ag [n]ode | awk "{print $2}" | xargs kill -9 > /dev/null 2>&1 &)
      else
        echo -e "${COL_BLUE} Port ${PORT} not in use";
      fi
  else
    echo "Usage: killPort <pid>"
  fi
}

runDebug() {
  if type "tmux" > /dev/null; then
    clearTmux
  fi;

  if [ -a core/worker-shim.js ]; then
    node debug core/worker-shim.js
  else
    node debug
  fi
}

killDebug() {

if [[ $(lsof -i :5858) ]]; then
    killPort 5858
    echo -e "${COL_BLUE}killed node debug${NORMAL}";
  else
    echo -e "${COL_BLUE}node debug is not running${NORMAL}";
fi
}

startDebug() {
  killDebug
  runDebug
}

cleanStart() {
  if (($# > 0)); then
    if [[$1 -eq "-d"]]; then
      npm cache clean && make clean setup assets dev
    fi
  else
    if ((type "npm" && !type "make")) > dev/null; then
      echo -e "${COL_BLUE}running cleanStart...${NORMAL}";
      rm -rf node_modules && npm install && gulp build server
    elif type "make" > /dev/null; then
      echo -e "${COL_BLUE}running cleanStart...${NORMAL}";
      npm cache clean && make clean setup assets
    else
      echo -e "${COL_BLUE}not in /grpn-* or a Skelator app${NORMAL}";
    fi
  fi
}

itg () {
  local FILE=$1
  #testium_launch=false PORT=3070 mocha $FILE
  mocha $FILE
}

function rebuild () {
  gulp build
  killPort 3070
  tmux send-keys -t left "make dev" C-m
}
